{
    "collab_server" : "",
    "contents" : "\nload(\"MSBD5013_Final_Project.RData\")\n\n\n\n\n\nstrategy <- function(open, high, low, close, amt, buyable, sellable, initial.cash, transaction){\n  \n  ## necessary packages\n  require(TTR)  # functions about technical indicators such as moving average\n  \n  \n  ## your own convenience functions \n  ## (please give comments about their purpose and the meaning of each argument)\n  pushback <- function(z, L=1){\n    # create a new matrix with all values moved downward L rows\n    # z is a matrix, L is a integer\n    z <- as.matrix(z)  \n    A <- matrix(NA, nrow=L, ncol=ncol(z))\n    y <- z\n    y[1:L,] <- A \n    y[-(1:L),] <- as.matrix(z[-((nrow(z)-L+1):nrow(z)), ])\n    return(y)\n  }\n  \n  pushforward <- function(z, L=1){\n    # create a new matrix with all values moved upward L rows\n    # z is a matrix, L is a integer\n    z <- as.matrix(z) \n    A <- matrix(NA, nrow=L, ncol=ncol(z))\n    y <- z\n    y[1:(nrow(z)-L), ] <- z[-(1:L),]\n    y[(nrow(z)-L+1):nrow(z),]<- A\n    return(y)\n  }\n  \n  \n  getmo = function(pos,j,tra,open,close){\n    pos.get <- pos[j,] - pos[j-1,]\n    z <- 0\n    for(n in 1:ncol(pos[j,])){\n      if (pos.get[n]<0) z <- z - pos.get[n]*open[j,n]*(1+tra)\n      if (pos.get[n]>0) z <- z - pos.get[n]*close[j,n]*(1-tra)\n    }\n    z <- as.numeric(z)\n    return(z)\n  }\n  \n  \n  getmod = function(amt,open,close,high,low,e){\n    if(e==1){\n      return(getmod1(amt,open,close,high,low))\n    }\n  }\n  \n  getmod1 = function(amt,open,close,high,low){\n    mod<-low*0\n    for(j in 2:nrow(close)){\n      mod[j,] <- close[j-1,]-open[j-1,]\n    }\n    return(mod)\n  }\n   \n  getsa = function(open,close,amt,high,low,buyable,sellable,mon,mod,tra,e){\n    if(e==1){\n      return(getsa1(open,close,amt,high,low,buyable,sellable,mon,mod,tra))\n    }\n  }\n  \n  getsa1 = function(open,close,amt,high,low,buyable,sellable,mon,mod,tra){\n   pos <- low*0\n   for(j in 2:nrow(close)){\n      #B\n      monspe <- 0.1*mon[j-1]\n      #buyable?\n      modthe <- mod[j,which(buyable[j,]==1)]\n      #A\n      bought <- which(buyable[j,]==1)[order(modthe)[ncol(modthe)]]\n      #calculate the share you buy today\n      getsha <- monspe/open[j,bought]/(1+tra)\n      #calculate the result of the position matrix of buy\n      pos[j,bought] <- getsha\n      #calculate the result of the position matrix of sell \n      #which to sell\n      sel = which(pos[j-1,]>pos[j,])\n      #Can I sell it today\n      pos[j,sel[which(sellable[j,sel]==0)]] = pos[j-1,sel[which(sellable[j,sel]==0)]]\n      #Calculate the money left today\n      mon[j] <- mon[j-1] + getmo(pos,j,tra,open,close)\n   }\n   write.csv(mon,\"mon.csv\")\n   return(pos)\n    \n  }\n  \n  ## the main part of your strategy\n  ## (please describe the idea of your strategy in the beginning, and give comments on key codes)\n  \n  # strategy: \n  # buy condition: for each stock, when observing 5-day moving average line upcrossing 60-day moving average line \n  # (moving averages are calculated by close price), buy this stock tomorrow at openning price (need satisfy buyable\n  # condition). The investment money should be around 5. When more than one stocks satisfy buy condition, just pick\n  # one stock with highest amount yesterday\n  # sell condition: for each stock in current position, when observing 5-day moving average line downcrossing 60-day \n  # moving average line, sell this stock tomorrow at closing price (need satisfy sellable condition)\n  # other settings: when observing available cash is less than 10, stop any buying actions\n  \n  reserved.cash <- 10\n  investment.cash <- 5\n  \n  MA5 <- apply(close, 2, SMA, n=5)  # 5-day simple moving average\n  MA60 <- apply(close, 2, SMA, n=60)  # 60-day simples moving average\n  \n  lower <- (MA5 < MA60)  # indicates when MA5 is lower than MA60\n  upper <- (MA5 >= MA60)  # indicates when MA5 is higher or equal than MA60\n  \n  upcrossing <- pushback(lower)*upper  \n  # an upcross happens when yesterday's MA5 is lower than MA60 but today's MA5 is higher or equal than MA60\n  downcrossing <- pushback(upper)*lower\n  # a downcross happens when yesterday's MA5 is higher or equal than MA60 but today's MA5 is lower than MA60\n  \n  buy.signal <- pushback(upcrossing)*buyable\n  # a buy signal happens when observed upcross yesterday, and the stock is \"buyable\" today\n  sell.signal <- pushback(downcrossing)*sellable\n  # a sell signal happens when observed downcross yesterday, and the stock is \"sellable\" today\n  \n  available.cash <- initial.cash  # initialize available cash\n  position.matrix <- close*0  # initialize position matrix\n  mod <- close*0\n  mon <- matrix(0,nrow=nrow(low),ncol=1)\n  mon[1] <- 100\n  e <- 1\n  w <- 1 \n  \n    \n  \n  mod <- getmod(amt,open,close,high,low,e)\n  position.matrix <- getsa(open,close,amt,high,low,buyable,sellable,mon,mod,transaction,e)\n  \n  \n  ## return position.matrix\n  return(position.matrix)\n}\n\nstart <- 1\nend <- nrow(CLOSE)\n\nopen <- OPEN[start:end,]\nclose <- CLOSE[start:end,]\nhigh <- HIGH[start:end,]\nlow <- LOW[start:end,]\namt <- AMT[start:end,]\nbuyable <- BUYABLE[start:end,]\nsellable <- SELLABLE[start:end,]\n\n\n\n\nposition.matrix <- strategy(open, high, low, close, amt, buyable, sellable, initial.cash, transaction)\nwrite.csv(position.matrix,\"qwe.csv\")\ncheck(open, high, low, close, amt, buyable, sellable, initial.cash, transaction, position.matrix)\nperformance.summary(open, high, low, close, amt, buyable, sellable, initial.cash, transaction, position.matrix)\n",
    "created" : 1481916072671.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2009452225",
    "id" : "CDFB382A",
    "lastKnownWriteTime" : 1481970435,
    "last_content_update" : 1481970435060,
    "path" : "C:/Users/Administrator/Desktop/l/13project/e/13project/finalproject_demo.R",
    "project_path" : "finalproject_demo.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}